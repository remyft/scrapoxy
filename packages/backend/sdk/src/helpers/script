#!/bin/bash
sudo apt-get update
sudo apt-get install -y ca-certificates curl gnupg
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor --yes -o /etc/apt/keyrings/nodesource.gpg
echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_18.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
sudo apt-get update
sudo apt-get install nodejs -y
echo "(()=>{"use strict";var e=[,e=>{e.exports=require("fs")},(e,r,t)=>{t.r(r),t.d(r,{Proxy:()=>n.Proxy,SCRAPOXY_PROXY_HEADER_PREFIX:()=>o.SCRAPOXY_PROXY_HEADER_PREFIX,SCRAPOXY_PROXY_HEADER_PREFIX_LC:()=>o.SCRAPOXY_PROXY_HEADER_PREFIX_LC,Sockets:()=>s.Sockets,parseConnectUrl:()=>s.parseConnectUrl,parseError:()=>s.parseError,sanitizeHeadersValue:()=>s.sanitizeHeadersValue,sigstop:()=>s.sigstop,socketWriteAsync:()=>s.socketWriteAsync});var s=t(3),o=t(10),n=t(11)},(e,r,t)=>{t.r(r),t.d(r,{Sockets:()=>c.Sockets,parseConnectUrl:()=>o.parseConnectUrl,parseError:()=>s.parseError,sanitizeHeadersValue:()=>n.sanitizeHeadersValue,sigstop:()=>i.sigstop,socketWriteAsync:()=>c.socketWriteAsync});var s=t(4),o=t(5),n=t(6),i=t(7),c=t(8)},(e,r,t)=>{function s(e){if(e)return!e.errors||e.errors.length<=0?e:e.errors[0]}t.r(r),t.d(r,{parseError:()=>s})},(e,r,t)=>{function s(e){if(!e)throw new Error("No URL found");const r=e.split(":");if(2!==r.length)throw new Error(`Cannot parse target: ${e}`);const t=r[0],s=parseInt(r[1]);if(!t||!s)throw new Error(`Cannot parse target (2): ${e}`);return{hostname:t,port:s}}t.r(r),t.d(r,{parseConnectUrl:()=>s})},(e,r,t)=>{t.r(r),t.d(r,{sanitizeHeadersValue:()=>o});const s=new RegExp("[
]","g");function o(e){if(!e)return e;if(Array.isArray(e)){const r=[];for(const t of e)r.push(t.replace(s,""));return r}return e.replace(s,"")}},(e,r,t)=>{function s(e){for(const r of["SIGABRT","SIGALRM","SIGBUS","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGQUIT","SIGSEGV","SIGTERM","SIGUSR1","SIGUSR2","SIGSYS","SIGTRAP","SIGVTALRM","SIGXFSZ"])process.on(r,e)}t.r(r),t.d(r,{sigstop:()=>s})},(e,r,t)=>{t.r(r),t.d(r,{Sockets:()=>s,socketWriteAsync:()=>o});t(9);class s{parent;sockets=[];constructor(e){this.parent=e}add(e,r){if(this.sockets.includes(e))throw new Error("Socket already exists");this.parent&&this.parent.add(e,r),this.sockets.push(e)}remove(e){const r=this.sockets.indexOf(e);r>=0&&this.sockets.splice(r,1),this.parent&&this.parent.remove(e)}closeAll(){for(;this.sockets.length>0;){const e=this.sockets.shift();this.parent&&this.parent.remove(e),e.destroy()}this.sockets.length=0}get size(){return this.sockets.length}}function o(e,r){return new Promise(((t,s)=>{e.write(r,(e=>{e?s(e):t()}))}))}},e=>{e.exports=require("net")},(e,r,t)=>{t.r(r),t.d(r,{SCRAPOXY_PROXY_HEADER_PREFIX:()=>s,SCRAPOXY_PROXY_HEADER_PREFIX_LC:()=>o});const s="X-Scrapoxy",o=s.toLowerCase()},(e,r,t)=>{t.r(r),t.d(r,{Proxy:()=>s.Proxy});var s=t(12);t(16)},(e,r,t)=>{t.r(r),t.d(r,{Proxy:()=>a});t(13);var s=t(14),o=t(9),n=t(15),i=t(3),c=t(10);class a{logger;timeout;server;sockets=new i.Sockets;connectsCountValue=0;connectsIgnoreCountValue=0;bytesReceivedValue=0;bytesReceivedIgnoreValue=0;bytesSentValue=0;bytesSentIgnoreValue=0;listenPromise;closePromise;get connectsCount(){return this.connectsCountValue}get connectsIgnoreCount(){return this.connectsIgnoreCountValue}get bytesReceived(){return this.bytesReceivedValue}get bytesReceivedIgnore(){return this.bytesReceivedIgnoreValue}get bytesSent(){return this.bytesSentValue}get bytesSentIgnore(){return this.bytesSentIgnoreValue}constructor(e,r,t,o){this.logger=e,this.timeout=r,this.server=(0,s.createServer)({requestCert:!0,rejectUnauthorized:!1,ca:t,cert:t,key:o}),this.server.on("connect",((e,r,t)=>{this.connect(e,r,t)})),this.server.on("request",((e,r)=>{r.statusCode=404,r.end()}))}get port(){const e=this.server.address();return e?e.port:null}listen(e=0){if(this.closePromise)throw new Error("Server has already been stopped");return this.listenPromise||(this.listenPromise=new Promise(((r,t)=>{this.server.on("listening",(()=>{this.logger.log(`Proxy listen at ${this.port}`),r(this.port)})),this.server.on("error",(r=>{r=(0,i.parseError)(r),t(new Error(`Proxy cannot listen at port ${e} : ${r.message}`))})),this.server.listen(e)}))),this.listenPromise}close(){return this.closePromise||(this.listenPromise?this.closePromise=new Promise(((e,r)=>{this.sockets.closeAll(),this.server.close((t=>{t?r(t):(this.logger.log("Proxy shutdown"),e())}))})):this.closePromise=Promise.resolve()),this.closePromise}connect(e,r,t){let s,a,l,h=!1;const u=new n.PassThrough,p=new n.PassThrough;if(r.on("error",(e=>{e=(0,i.parseError)(e),this.logger.error(`Error (socket): ${e.message} (${s}:${a})`,e.stack),!l||l.closed||l.destroyed||l.end()})),r.on("end",(()=>{!l||l.closed||l.destroyed||(u.unpipe(r),l.unpipe(u),l.end())})),r.on("close",(()=>{this.sockets.remove(r)})),this.sockets.add(r),"ignore"===e.headers[`${c.SCRAPOXY_PROXY_HEADER_PREFIX_LC}-metrics`]?(++this.connectsIgnoreCountValue,u.on("data",(e=>{this.bytesReceivedIgnoreValue+=e.length})),p.on("data",(e=>{this.bytesSentIgnoreValue+=e.length}))):(++this.connectsCountValue,u.on("data",(e=>{this.bytesReceivedValue+=e.length})),p.on("data",(e=>{this.bytesSentValue+=e.length}))),r.authorized)try{const n=(0,i.parseConnectUrl)(e.url);s=n.hostname,a=n.port,l=(0,o.createConnection)({host:s,port:a}),l.on("error",(e=>{if(e=(0,i.parseError)(e),this.logger.error(`Error (proxySocket): ${e.message} (${s}:${a})`,e.stack),!r.closed&&!r.destroyed)if(h)r.end();else{const t=(0,i.sanitizeHeadersValue)(e.message);r.end(`HTTP/1.1 500 connect_error
${c.SCRAPOXY_PROXY_HEADER_PREFIX}-Proxyerror: ${t}


`)}})),l.on("end",(()=>{r.closed||r.destroyed||(p.unpipe(l),r.unpipe(p),r.end())})),l.on("close",(()=>{this.sockets.remove(l)})),this.sockets.add(l),l.on("timeout",(()=>{l.destroy(),l.emit("close")})),l.setTimeout(this.timeout),l.on("connect",(()=>{(0,i.socketWriteAsync)(l,t).then((()=>(0,i.socketWriteAsync)(r,"HTTP/1.1 200 OK

"))).then((()=>{h=!0,l.pipe(u).pipe(r)})).catch((e=>{l.emit("error",e)}))})),r.pipe(p).pipe(l)}catch(e){this.logger.error(`Error (connect): ${e.message}`,e.stack)}else r.end(`HTTP/1.1 401 connect_error
${c.SCRAPOXY_PROXY_HEADER_PREFIX}-Proxyerror: invalid certificate


`)}}},e=>{e.exports=require("http")},e=>{e.exports=require("https")},e=>{e.exports=require("stream")},(e,r,t)=>{t.r(r)}],r={};function t(s){var o=r[s];if(void 0!==o)return o.exports;var n=r[s]={exports:{}};return e[s](n,n.exports,t),n.exports}t.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return t.d(r,{a:r}),r},t.d=(e,r)=>{for(var s in r)t.o(r,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:r[s]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};(()=>{t.r(s);var e=t(1),r=t(2);class o{log(e){console.log(e)}error(e,r){console.error(e),r&&console.error(r)}debug(e){console.debug(e)}}(async()=>{const t=parseInt(process.env.PORT??"3128",10),s=parseInt(process.env.TIMEOUT??"60000",10),[n,i]=await Promise.all([e.promises.readFile("certificate.pem").then((e=>e.toString())),e.promises.readFile("certificate.key").then((e=>e.toString()))]),c=new o,a=new r.Proxy(c,s,n,i);(0,r.sigstop)((()=>{a.close().catch((e=>{c.error(e)}))})),await a.listen(t)})().catch((e=>{console.error(e)}))})()})();" > /root/proxy.js
cat << 'EOF' | sudo tee /root/package.json > /dev/null
{
    "name": "@scrapoxy/proxy",
    "dependencies": {
        "tslib": "^2.3.0"
    }
}

EOF
cat << 'EOF' | sudo tee /etc/init.d/proxyup.sh > /dev/null
#!/bin/sh

USER="root"
APP_DIR="/root"
NODE_APP="proxy.js"
KWARGS=""
PID_DIR="$APP_DIR/pid"
PID_FILE="$PID_DIR/app.pid"
LOG_DIR="$APP_DIR/log"
LOG_FILE="$LOG_DIR/app.log"
NODE_EXEC=$(which node)
APP_NAME="proxyup"

###############

# REDHAT chkconfig header

# chkconfig: - 58 74
# description: node-app is the script for starting a node app on boot.
### BEGIN INIT INFO
# Provides: node
# Required-Start:    $network $remote_fs $local_fs
# Required-Stop:     $network $remote_fs $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start and stop node
# Description: Node process for app
### END INIT INFO

###############

USAGE="Usage: $0 {start|stop|restart|status}"

pid_file_exists() {
    [ -f "$PID_FILE" ]
}

get_pid() {
    echo "$(cat "$PID_FILE")"
}

is_running() {
    PID=$(get_pid)
    ! [ -z "$(ps aux | awk '{print $2}' | grep "^$PID$")" ]
}

start_it() {
    mkdir -p "$PID_DIR"
    chown $USER:$USER "$PID_DIR"
    mkdir -p "$LOG_DIR"
    chown $USER:$USER "$LOG_DIR"

    echo "Starting $APP_NAME ..."
    echo "cd $APP_DIR && $NODE_EXEC $NODE_APP $KWARGS 1>$LOG_FILE 2>&1 & echo \$! > $PID_FILE" | sudo -i -u $USER
    echo "$APP_NAME started with pid $(get_pid)"
}

stop_process() {
    PID=$(get_pid)
    echo "Killing process $PID"
    pkill -P $PID
}

remove_pid_file() {
    echo "Removing pid file"
    rm -f "$PID_FILE"
}

start_app() {
    if pid_file_exists
    then
        if is_running
        then
            PID=$(get_pid)
            echo "$APP_NAME already running with pid $PID"
            exit 1
        else
            echo "$APP_NAME stopped, but pid file exists"
            echo "Forcing start anyways"
            remove_pid_file
            start_it
        fi
    else
        start_it
    fi
}

stop_app() {
    if pid_file_exists
    then
        if is_running
        then
            echo "Stopping $APP_NAME ..."
            stop_process
            remove_pid_file
            echo "$APP_NAME stopped"
        else
            echo "$APP_NAME already stopped, but pid file exists"
            echo "Forcing stop anyways ..."
            remove_pid_file
            echo "$APP_NAME stopped"
        fi
    else
        echo "$APP_NAME already stopped, pid file does not exist"
        exit 1
    fi
}

status_app() {
    if pid_file_exists
    then
        if is_running
        then
            PID=$(get_pid)
            echo "$APP_NAME running with pid $PID"
        else
            echo "$APP_NAME stopped, but pid file exists"
        fi
    else
        echo "$APP_NAME stopped"
    fi
}

case "$2" in
    "")
    ;;

    *)
        echo $USAGE
        exit 1
    ;;
esac

case "$1" in
    start)
        start_app
    ;;

    stop)
        stop_app
    ;;

    restart)
        stop_app
        start_app
    ;;

    status)
        status_app
    ;;

    *)
        echo $USAGE
        exit 1
    ;;
esac

EOF
cat << 'EOF' | sudo tee /root/certificate.pem > /dev/null
test
EOF
cat << 'EOF' | sudo tee /root/certificate.key > /dev/null
test
EOF
sudo npm install --prefix /root
sudo chmod a+x /etc/init.d/proxyup.sh
sudo update-rc.d proxyup.sh defaults
sudo /etc/init.d/proxyup.sh start
